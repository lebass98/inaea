import React, { useState } from 'react';
import { getImagePath } from '../../utils/imagePath';
import SubVisual from '../SubVisual';
import SubLeftMenu from '../SubLeftMenu';
import '../../assets/css/board.css';
import './NotificationPage.css';

interface NotificationItem {
  id: number;
  type: 'notice' | 'inquiry' | 'faq' | 'evaluation';
  title: string;
  time: string;
  content: string;
  date?: string;
}

const NotificationPage: React.FC = () => {
  const [selectedItems, setSelectedItems] = useState<number[]>([]);
  const [isSelectionMode, setIsSelectionMode] = useState(false);

  const todayNotifications: NotificationItem[] = [
    {
      id: 1,
      type: 'notice',
      title: 'Í≥µÏßÄÏÇ¨Ìï≠',
      time: 'Ïò§ÌõÑ 15:05',
      content: 'ÏÉàÎ°úÏö¥ Í≤åÏãúÍ∏ÄÏù¥ ÏûàÏäµÎãàÎã§.\n[ÏãúÌñâ ÌõÑ ÏòÅÏó≠Î≥Ñ/Ïó≠ÎüâÎ≥Ñ ÏÑ±Ï∑®Ïú®Ïóê ÎπÑÌï¥ÏÑú ÏÑ±Ï∑®ÏàòÏ§ÄÏù¥ ÎÇÆÍ≤å ÎÇòÏò® Í≤É Í∞ôÏùÄÎç∞ Ï†úÎ™© ÎßêÏ§ÑÏûÑÌëú‚Ä¶‚Ä¶‚Ä¶‚Ä¶] [2025/02/12]'
    },
    {
      id: 2,
      type: 'inquiry',
      title: 'Î¨∏ÏùòÌïòÍ∏∞',
      time: 'Ïò§Ï†Ñ 08:05',
      content: 'Î¨∏ÏùòÌïòÍ∏∞ ÎãµÎ≥ÄÏù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.'
    },
    {
      id: 3,
      type: 'faq',
      title: 'FAQ',
      time: 'Ïò§Ï†Ñ 12:55',
      content: 'ÏàòÏ†ïÎêú Í≤åÏãúÍ∏ÄÏù¥ ÏûàÏäµÎãàÎã§.\n[ÏãúÌñâ ÌõÑ ÏòÅÏó≠Î≥Ñ/Ïó≠ÎüâÎ≥Ñ ÏÑ±Ï∑®Ïú®Ïóê ÎπÑÌï¥ÏÑú ÏÑ±Ï∑®ÏàòÏ§ÄÏù¥ ÎÇÆÍ≤å ÎÇòÏò® Í≤É Í∞ôÏùÄÎç∞ Ï†úÎ™© ÎßêÏ§ÑÏûÑÌëú‚Ä¶‚Ä¶‚Ä¶‚Ä¶][2025/02/12]'
    },
    {
      id: 4,
      type: 'evaluation',
      title: 'ÌèâÍ∞ÄÍ≤∞Í≥º',
      time: 'Ïò§Ï†Ñ 09:12',
      content: 'ÌèâÍ∞ÄÍ≤∞Í≥ºÍ∞Ä Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.\n[2005ÎÖÑ][ÏûêÏú®ÌèâÍ∞Ä][ÎßûÏ∂§Ìòï ÌïôÏóÖÏÑ±Ï∑®ÎèÑ ÏûêÏú®ÌèâÍ∞Ä(Ï¥à6)(2005-ÏûêÏú®-Î≥∏1]'
    }
  ];

  const previousNotifications: NotificationItem[] = [
    {
      id: 5,
      type: 'notice',
      title: 'Í≥µÏßÄÏÇ¨Ìï≠',
      time: '7Ïõî5Ïùº',
      content: 'ÏÉàÎ°úÏö¥ Í≤åÏãúÍ∏ÄÏù¥ ÏûàÏäµÎãàÎã§.\n[ÏãúÌñâ ÌõÑ ÏòÅÏó≠Î≥Ñ/Ïó≠ÎüâÎ≥Ñ ÏÑ±Ï∑®Ïú®Ïóê ÎπÑÌï¥ÏÑú ÏÑ±Ï∑®ÏàòÏ§ÄÏù¥ ÎÇÆÍ≤å ÎÇòÏò® Í≤É Í∞ôÏùÄÎç∞ Ï†úÎ™© ÎßêÏ§ÑÏûÑÌëú‚Ä¶‚Ä¶‚Ä¶‚Ä¶] [2025/02/12]'
    },
    {
      id: 6,
      type: 'inquiry',
      title: 'Î¨∏ÏùòÌïòÍ∏∞',
      time: '7Ïõî1Ïùº',
      content: 'Î¨∏ÏùòÌïòÍ∏∞ ÎãµÎ≥ÄÏù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.'
    },
    {
      id: 7,
      type: 'faq',
      title: 'FAQ',
      time: '3Ïõî21Ïùº',
      content: 'ÏàòÏ†ïÎêú Í≤åÏãúÍ∏ÄÏù¥ ÏûàÏäµÎãàÎã§.\n[ÏãúÌñâ ÌõÑ ÏòÅÏó≠Î≥Ñ/Ïó≠ÎüâÎ≥Ñ ÏÑ±Ï∑®Ïú®Ïóê ÎπÑÌï¥ÏÑú ÏÑ±Ï∑®ÏàòÏ§ÄÏù¥ ÎÇÆÍ≤å ÎÇòÏò® Í≤É Í∞ôÏùÄÎç∞ Ï†úÎ™© ÎßêÏ§ÑÏûÑÌëú‚Ä¶‚Ä¶‚Ä¶‚Ä¶][2025/02/12]'
    },
    {
      id: 8,
      type: 'evaluation',
      title: 'ÌèâÍ∞ÄÍ≤∞Í≥º',
      time: '1Ïõî15Ïùº',
      content: 'ÌèâÍ∞ÄÍ≤∞Í≥ºÍ∞Ä Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.\n[2005ÎÖÑ][ÏûêÏú®ÌèâÍ∞Ä][ÎßûÏ∂§Ìòï ÌïôÏóÖÏÑ±Ï∑®ÎèÑ ÏûêÏú®ÌèâÍ∞Ä(Ï¥à6)(2005-ÏûêÏú®-Î≥∏1]'
    }
  ];

  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'notice':
        return 'üîî';
      case 'inquiry':
        return 'üí¨';
      case 'faq':
        return '‚ùì';
      case 'evaluation':
        return 'üìã';
      default:
        return 'üì¢';
    }
  };

  const getNotificationColor = (type: string) => {
    switch (type) {
      case 'notice':
        return '#62ABFF';
      case 'inquiry':
        return '#62ABFF';
      case 'faq':
        return '#4CAF50';
      case 'evaluation':
        return '#9C27B0';
      default:
        return '#62ABFF';
    }
  };

  const handleSelectionMode = () => {
    setIsSelectionMode(true);
    setSelectedItems([]);
  };

  const handleCancel = () => {
    setIsSelectionMode(false);
    setSelectedItems([]);
  };

  const handleSelectAll = () => {
    // ÏÑ†ÌÉù Î™®Îìú Í∞ïÏ†ú ÌôúÏÑ±Ìôî
    if (!isSelectionMode) setIsSelectionMode(true);
    const allNotificationIds = [...todayNotifications, ...previousNotifications].map(item => item.id);
    if (selectedItems.length === allNotificationIds.length) {
      setSelectedItems([]);
    } else {
      setSelectedItems(allNotificationIds);
    }
  };

  const handleDeleteSelected = () => {
    console.log('ÏÇ≠Ï†úÌï† Ìï≠Î™©:', selectedItems);
    setIsSelectionMode(false);
    setSelectedItems([]);
  };

  const handleDeleteAll = () => {
    console.log('Ï†ÑÏ≤¥ ÏÇ≠Ï†ú');
    setIsSelectionMode(false);
    setSelectedItems([]);
  };

  const handleItemClick = (id: number) => {
    if (isSelectionMode) {
      setSelectedItems(prev => 
        prev.includes(id) 
          ? prev.filter(item => item !== id)
          : [...prev, id]
      );
    } else {
      console.log('ÏïåÎ¶º ÏÉÅÏÑ∏:', id);
    }
  };

  const renderNotificationItem = (item: NotificationItem) => {
    const isSelected = selectedItems.includes(item.id);
    const iconContent = isSelectionMode ? (isSelected ? '‚úì' : '') : getNotificationIcon(item.type);
    const iconStyle: React.CSSProperties = isSelectionMode
      ? { backgroundColor: isSelected ? '#62ABFF' : '#fff', borderColor: isSelected ? '#62ABFF' : '#CFE3FF' }
      : { backgroundColor: getNotificationColor(item.type) };

    return (
      <div 
        key={item.id}
        className={`notification-item ${isSelected ? 'selected' : ''}`}
        onClick={() => handleItemClick(item.id)}
      >
        <div className="notification-icon" style={iconStyle}>
          {iconContent}
        </div>
        <div className="notification-content">
          <div className="notification-header">
            <span className="notification-title">{item.title}</span>
            <span className="notification-time">{item.time}</span>
          </div>
          <div className="notification-text">
            {item.content.split('\n').map((line, index) => (
              <div key={index} className="notification-line">{line}</div>
            ))}
          </div>
        </div>
        <div className="notification-arrow">‚Üí</div>
      </div>
    );
  };

  return (
    <div className="sub-page">
      <SubVisual
        title="ÎßàÏù¥ÌéòÏù¥ÏßÄ"
        breadcrumbs={[
          { label: 'HOME', href: '/', isHome: true },
          { label: 'ÎßàÏù¥ÌéòÏù¥ÏßÄ' },
          { label: 'ÏïåÎ¶º', isActive: true },
        ]}
        backgroundImage={getImagePath('images/sub/sub_visual_3.png')}
      />

      <div className="sub-content">
        <SubLeftMenu
          title="ÎßàÏù¥ÌéòÏù¥ÏßÄ"
          menuItems={[
            { id: 'mypage-noti', label: 'ÏïåÎ¶º', href: '#notification', isActive: true, path: '/notification' },
            { id: 'mypage-inquiry', label: 'Î¨∏ÏùòÌïòÍ∏∞', href: '#inquiry', path: '/inquiry' },
          ]}
          backgroundImage={getImagePath('images/sub/sub_side_bg_3.png')}
        />

        <div className="sub-content-wrap">
          <div className="sub-content-header">
            <h2>ÏïåÎ¶º</h2>
          </div>

          <div className="sub-content-main">
            <div className={`notification-page ${isSelectionMode ? 'selection-mode' : ''}`}>
              <div className="notification-section">
                <div className="section-header">
                  <h2>Ïò§Îäò Î∞õÏùÄ ÏïåÎ¶º</h2>
                  {!isSelectionMode ? (
                    <div className="default-buttons">
                      <button className="btn-select" onClick={handleSelectionMode}>
                        ÏÇ≠Ï†ú
                      </button>
                      {/* <button className="btn-select-all" onClick={handleSelectAll}>
                        Ï†ÑÏ≤¥ ÏÑ†ÌÉù
                      </button> */}
                    </div>
                  ) : (
                    <div className="action-buttons">
                      <button className="btn-delete-selected" onClick={handleDeleteSelected}>
                        ÏÑ†ÌÉù ÏÇ≠Ï†ú
                      </button>
                      <button className="btn-delete-all" onClick={handleDeleteAll}>
                        Ï†ÑÏ≤¥ ÏÇ≠Ï†ú
                      </button>
                      <button className="btn-cancel" onClick={handleCancel}>
                        Ï∑®ÏÜå
                      </button>
                    </div>
                  )}
                </div>
                <div className="notification-list">
                  {todayNotifications.map(renderNotificationItem)}
                </div>
              </div>

              <div className="notification-section">
                <div className="section-header">
                  <h2>Ïù¥Ï†Ñ ÏïåÎ¶º</h2>
                </div>
                <div className="notification-list">
                  {previousNotifications.map(renderNotificationItem)}
                </div>
              </div>

              <div className="pagination">
                <button className="page-btn prev">‚Üê</button>
                <button className="page-btn active">1</button>
                <button className="page-btn">2</button>
                <button className="page-btn">3</button>
                <button className="page-btn">4</button>
                <button className="page-btn">5</button>
                <span className="page-ellipsis">...</span>
                <button className="page-btn next">‚Üí</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default NotificationPage;
